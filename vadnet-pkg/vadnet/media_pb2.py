# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: media.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='media.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x0bmedia.proto\"\x14\n\x05\x61udio\x12\x0b\n\x03raw\x18\x01 \x01(\x0c\"6\n\x0einferredResult\x12\x11\n\x05noise\x18\x01 \x03(\x01\x42\x02\x10\x01\x12\x11\n\x05voice\x18\x02 \x03(\x01\x42\x02\x10\x01\x32\x37\n\x0cMediaService\x12\'\n\x06\x66ilter\x12\x06.audio\x1a\x0f.inferredResult\"\x00(\x01\x30\x01\x62\x06proto3')
)




_AUDIO = _descriptor.Descriptor(
  name='audio',
  full_name='audio',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='raw', full_name='audio.raw', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=15,
  serialized_end=35,
)


_INFERREDRESULT = _descriptor.Descriptor(
  name='inferredResult',
  full_name='inferredResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='noise', full_name='inferredResult.noise', index=0,
      number=1, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='voice', full_name='inferredResult.voice', index=1,
      number=2, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=91,
)

DESCRIPTOR.message_types_by_name['audio'] = _AUDIO
DESCRIPTOR.message_types_by_name['inferredResult'] = _INFERREDRESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

audio = _reflection.GeneratedProtocolMessageType('audio', (_message.Message,), {
  'DESCRIPTOR' : _AUDIO,
  '__module__' : 'media_pb2'
  # @@protoc_insertion_point(class_scope:audio)
  })
_sym_db.RegisterMessage(audio)

inferredResult = _reflection.GeneratedProtocolMessageType('inferredResult', (_message.Message,), {
  'DESCRIPTOR' : _INFERREDRESULT,
  '__module__' : 'media_pb2'
  # @@protoc_insertion_point(class_scope:inferredResult)
  })
_sym_db.RegisterMessage(inferredResult)


_INFERREDRESULT.fields_by_name['noise']._options = None
_INFERREDRESULT.fields_by_name['voice']._options = None

_MEDIASERVICE = _descriptor.ServiceDescriptor(
  name='MediaService',
  full_name='MediaService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=93,
  serialized_end=148,
  methods=[
  _descriptor.MethodDescriptor(
    name='filter',
    full_name='MediaService.filter',
    index=0,
    containing_service=None,
    input_type=_AUDIO,
    output_type=_INFERREDRESULT,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_MEDIASERVICE)

DESCRIPTOR.services_by_name['MediaService'] = _MEDIASERVICE

# @@protoc_insertion_point(module_scope)
